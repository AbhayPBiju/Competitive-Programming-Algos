#include <bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};

void printList(Node* node)
{
	while (node != NULL)
	{
		printf("%d ", node->data);
		node = node->next;
	}
	cout<<endl;
}

/*Linked list Node structure

struct Node
{
	int data;
	Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};
*/ 

class Solution{
  public:
    //Function to merge K sorted linked list.
    struct comparator{
        bool operator()(Node* h1, Node* h2){
            return h1->data > h2->data; 
        }
    };
    
    Node * mergeKLists(Node *arr[], int K)
    {
           // Your code here
           priority_queue<Node*, vector<Node*>, comparator> pq; 
           
           int idx =0; 
           while(idx < K){
               if(arr[idx]!=NULL){
                   pq.push(arr[idx]);
                   idx++;
               }
                
           }
           Node* dummyNode= new Node(-1); 
           Node* temp= dummyNode; 
           while(!pq.empty()){
               
               Node* topEl= pq.top(); 
               pq.pop();
               temp->next= topEl; 
               temp=temp->next; 
               
               if(topEl->next != NULL){
                   pq.push(topEl->next); 
               }
           }
           Node* head= dummyNode->next; 
           return head; 
    }
};


int main()
{
   int t;
   cin>>t;
   while(t--)
   {
	   int N;
	   cin>>N;
       struct Node *arr[N];
       for(int j=0;j<N;j++)
        {
           int n;
           cin>>n;

           int x;
           cin>>x;
           arr[j]=new Node(x);
           Node *curr = arr[j];
           n--;

           for(int i=0;i<n;i++)
           {
               cin>>x;
               Node *temp = new Node(x);
               curr->next =temp;
               curr=temp;
           }
   		}
   		Solution obj;
   		Node *res = obj.mergeKLists(arr,N);
		printList(res);

   }

	return 0;
}
